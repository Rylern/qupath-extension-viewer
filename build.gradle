plugins {
    // Main gradle plugin for building a Java library
    id 'java-library'
    // To create a shadow/fat jar that bundle up all dependencies
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Include this plugin to avoid downloading JavaCPP dependencies for all platforms
    id 'org.bytedeco.gradle-javacpp-platform'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

ext.moduleName = 'io.github.qupath.extension.viewer'

base {
    archivesName = rootProject.name
    version = '0.0.1-SNAPSHOT'
    description = 'A 3D viewer for QuPath'
}

ext.qupathVersion = gradle.ext.qupathVersion
ext.qupathVersion = '0.5.1'       // TODO: change

ext.qupathJavaVersion = 17

dependencies {
    shadow "io.github.qupath:qupath-gui-fx:${qupathVersion}"

    shadow libs.slf4j
}

/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": moduleName)
    }
}

/**
 * Copy necessary attributes, see
 * - https://github.com/qupath/qupath-extension-template/issues/9
 * - https://github.com/openjfx/javafx-gradle-plugin#variants
 */
configurations.shadow  {
    def runtimeAttributes = configurations.runtimeClasspath.attributes
    runtimeAttributes.keySet().each { key ->
        if (key in [Usage.USAGE_ATTRIBUTE, OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, MachineArchitecture.ARCHITECTURE_ATTRIBUTE])
            attributes.attribute(key, runtimeAttributes.getAttribute(key))
    }
}

/*
 * Copy the LICENSE file into the jar... if we have one (we should!)
 */
processResources {
  from ("${projectDir}/LICENSE") {
    into 'licenses/'
  }
}

/*
 * Define extra 'copyDependencies' task to copy dependencies into the build directory.
 */
tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 17 compatibility, and include sources and javadocs when building.
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(qupathJavaVersion)
    }
    withSourcesJar()
    withJavadocJar()
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
	def strictJavadoc = findProperty('strictJavadoc')
	if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
	}
}

/*
 * Specify that the encoding should be UTF-8 for source files
 */
tasks.named('compileJava') {
	options.encoding = 'UTF-8'
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Looks redundant to include this here and in settings.gradle,
// but helps overcome some gradle trouble when including this as a subproject
// within QuPath itself (which is useful during development).
repositories {
    // Add this if you need access to dependencies only installed locally
    //  mavenLocal()

    mavenCentral()

    // Add scijava - which is where QuPath's jars are hosted
    maven {
        url "https://maven.scijava.org/content/repositories/releases"
    }

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }

}
